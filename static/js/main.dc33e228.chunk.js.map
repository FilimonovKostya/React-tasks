{"version":3,"sources":["Components/CleverClock/CleverClock.module.css","Components/CleverClock/CleverClock.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CleverClock","day","Date","React","useState","getHours","hh","setHh","getMinutes","mm","setMm","getSeconds","ss","setSs","useEffect","time","setInterval","clearInterval","styleHr","transform","styleMn","styleSs","className","style","clock","hour","hr","id","min","mn","sec","sc","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,KAAO,0BAA0B,IAAM,yBAAyB,IAAM,yBAAyB,GAAK,wBAAwB,GAAK,wBAAwB,GAAK,0B,yLCgDpMC,MA9Cf,WACI,IAEMC,EAAM,IAAIC,KAHG,EAICC,IAAMC,SAA0B,GAAjBH,EAAII,YAJpB,mBAIZC,EAJY,KAIRC,EAJQ,OAKCJ,IAAMC,SAJd,EAIuBH,EAAIO,cALpB,mBAKZC,EALY,KAKRC,EALQ,OAMCP,IAAMC,SALd,EAKuBH,EAAIU,cANpB,mBAMZC,EANY,KAMRC,EANQ,KAQnBC,qBAAU,WACN,IAAMC,EAAOC,aAAY,WAIrB,OAHAH,EATI,GASE,IAAIX,MAAOS,cACjBD,EAVI,GAUE,IAAIR,MAAOM,cACjBD,EAA8B,IAAxB,IAAIL,MAAOG,YACV,WACHY,cAAcF,MAEnB,QAIP,IAAIG,EAAU,CACVC,UAAU,WAAD,OAAcb,EAAOG,EAAK,GAA1B,SAGTW,EAAU,CACVD,UAAU,WAAD,OAAaV,EAAb,SAGTY,EAAU,CACVF,UAAU,WAAD,OAAaP,EAAb,SAIb,OAAO,yBAAKU,UAAWC,IAAMC,OACzB,yBAAKF,UAAWC,IAAME,MAClB,yBAAKH,UAAWC,IAAMG,GAAIC,GAAI,KAAMJ,MAAOL,KAE/C,yBAAKI,UAAWC,IAAMK,KAClB,yBAAKN,UAAWC,IAAMM,GAAIF,GAAI,KAAMJ,MAAOH,KAE/C,yBAAKE,UAAWC,IAAMO,KAClB,yBAAKR,UAAWC,IAAMQ,GAAIJ,GAAI,KAAMJ,MAAOF,OC/BxCW,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCIQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc33e228.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"clock\":\"CleverClock_clock__3jXFE\",\"hour\":\"CleverClock_hour__2NbUU\",\"min\":\"CleverClock_min__ruO-R\",\"sec\":\"CleverClock_sec__3Iggj\",\"hr\":\"CleverClock_hr__3oIh1\",\"mn\":\"CleverClock_mn__2OaaU\",\"sc\":\"CleverClock_sc__1BLG0\"};","import React, {useEffect} from \"react\";\r\nimport style from './CleverClock.module.css'\r\n\r\nfunction CleverClock() {\r\n    const deg = 6\r\n\r\n    const day = new Date()\r\n    const [hh, setHh] = React.useState(day.getHours() * 30)\r\n    const [mm, setMm] = React.useState(day.getMinutes() * deg)\r\n    const [ss, setSs] = React.useState(day.getSeconds() * deg)\r\n\r\n    useEffect(() => {\r\n        const time = setInterval(() => {\r\n            setSs(new Date().getSeconds() * deg)\r\n            setMm(new Date().getMinutes() * deg)\r\n            setHh(new Date().getHours() * 30)\r\n            return () => {\r\n                clearInterval(time)\r\n            }\r\n        }, 1000)\r\n    },)\r\n\r\n\r\n    let styleHr = {\r\n        transform: `rotateZ(${(hh) + (mm / 12)}deg)`\r\n    }\r\n\r\n    let styleMn = {\r\n        transform: `rotateZ(${mm}deg)`\r\n    }\r\n\r\n    let styleSs = {\r\n        transform: `rotateZ(${ss}deg)`\r\n    }\r\n\r\n\r\n    return <div className={style.clock}>\r\n        <div className={style.hour}>\r\n            <div className={style.hr} id={'hr'} style={styleHr}/>\r\n        </div>\r\n        <div className={style.min}>\r\n            <div className={style.mn} id={'mn'} style={styleMn}/>\r\n        </div>\r\n        <div className={style.sec}>\r\n            <div className={style.sc} id={'sc'} style={styleSs}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default CleverClock","import React from \"react\";\r\nimport \"./App.css\";\r\nimport CleverClock from \"./Components/CleverClock/CleverClock\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <CleverClock/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}